//
// LendingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class LendingAPI {
    /**

     - parameter amount: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getBorrowPreview(amount: Double, completion: @escaping ((_ data: GetLoanPreviewResponse?,_ error: Error?) -> Void)) {
        getBorrowPreviewWithRequestBuilder(amount: amount).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/Lending/borrow/preview/{amount}
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "directDebitAgreement" : "directDebitAgreement",
  "amount" : 0.8008281904610115,
  "loanAgreement" : "loanAgreement",
  "repaymentDate" : "repaymentDate",
  "fee" : 6.027456183070403,
  "bankName" : "bankName",
  "financialAccountId" : 1,
  "maskedAccountNumber" : "maskedAccountNumber",
  "firstTimeBorrow" : true
}}]
     
     - parameter amount: (path)  

     - returns: RequestBuilder<GetLoanPreviewResponse> 
     */
    open class func getBorrowPreviewWithRequestBuilder(amount: Double) -> RequestBuilder<GetLoanPreviewResponse> {
        var path = "/v1/Lending/borrow/preview/{amount}"
        let amountPreEscape = "\(amount)"
        let amountPostEscape = amountPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{amount}", with: amountPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GetLoanPreviewResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLending(completion: @escaping ((_ data: GetLendingOverviewResponse?,_ error: Error?) -> Void)) {
        getLendingWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/Lending/overview
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "withdrawableAmount" : 0.8008281904610115,
  "loanTranscations" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "amount" : 1.4658129805029452,
    "loanAgreementUrl" : "loanAgreementUrl",
    "directDebitAgreementUrl" : "directDebitAgreementUrl",
    "fee" : 5.962133916683182
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "amount" : 1.4658129805029452,
    "loanAgreementUrl" : "loanAgreementUrl",
    "directDebitAgreementUrl" : "directDebitAgreementUrl",
    "fee" : 5.962133916683182
  } ],
  "eligibility" : {
    "kycStatus" : "NotStarted",
    "displayLockScreen" : true,
    "failureDetail" : {
      "failureReasonDescription" : "failureReasonDescription",
      "failureReason" : "CreditAssessment"
    },
    "hasEmploymentDetail" : true,
    "directDebitTryAgainDays" : 6,
    "hasDirectDebitDetail" : true,
    "hasNameConflict" : true
  }
}}]

     - returns: RequestBuilder<GetLendingOverviewResponse> 
     */
    open class func getLendingWithRequestBuilder() -> RequestBuilder<GetLendingOverviewResponse> {
        let path = "/v1/Lending/overview"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GetLendingOverviewResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLendingHistories(completion: @escaping ((_ data: [LoanTransaction]?,_ error: Error?) -> Void)) {
        getLendingHistoriesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/Lending/histories
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 1.4658129805029452,
  "loanAgreementUrl" : "loanAgreementUrl",
  "directDebitAgreementUrl" : "directDebitAgreementUrl",
  "fee" : 5.962133916683182
}, {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 1.4658129805029452,
  "loanAgreementUrl" : "loanAgreementUrl",
  "directDebitAgreementUrl" : "directDebitAgreementUrl",
  "fee" : 5.962133916683182
} ]}]

     - returns: RequestBuilder<[LoanTransaction]> 
     */
    open class func getLendingHistoriesWithRequestBuilder() -> RequestBuilder<[LoanTransaction]> {
        let path = "/v1/Lending/histories"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[LoanTransaction]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter amount: (query)  (optional)
     - parameter fee: (query)  (optional)
     - parameter toFinancialAccountId: (query)  (optional)
     - parameter repaymentDate: (query)  (optional)
     - parameter agreeLoanAgreement: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postBorrow(amount: Int? = nil, fee: Int? = nil, toFinancialAccountId: Int? = nil, repaymentDate: Date? = nil, agreeLoanAgreement: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postBorrowWithRequestBuilder(amount: amount, fee: fee, toFinancialAccountId: toFinancialAccountId, repaymentDate: repaymentDate, agreeLoanAgreement: agreeLoanAgreement).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /v1/Lending/borrow
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter amount: (query)  (optional)
     - parameter fee: (query)  (optional)
     - parameter toFinancialAccountId: (query)  (optional)
     - parameter repaymentDate: (query)  (optional)
     - parameter agreeLoanAgreement: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postBorrowWithRequestBuilder(amount: Int? = nil, fee: Int? = nil, toFinancialAccountId: Int? = nil, repaymentDate: Date? = nil, agreeLoanAgreement: Bool? = nil) -> RequestBuilder<Void> {
        let path = "/v1/Lending/borrow"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "Amount": amount?.encodeToJSON(), 
            "Fee": fee?.encodeToJSON(), 
            "ToFinancialAccountId": toFinancialAccountId?.encodeToJSON(), 
            "RepaymentDate": repaymentDate?.encodeToJSON(), 
            "AgreeLoanAgreement": agreeLoanAgreement
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTime(request: PostWorksheetRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postTimeWithRequestBuilder(request: request).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /v1/Lending/timesheets/geolocation
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postTimeWithRequestBuilder(request: PostWorksheetRequest? = nil) -> RequestBuilder<Void> {
        let path = "/v1/Lending/timesheets/geolocation"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter bsb: (query)  
     - parameter accountNumber: (query)  
     - parameter isJointAccount: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putBankAccount(bsb: String, accountNumber: String, isJointAccount: Bool? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putBankAccountWithRequestBuilder(bsb: bsb, accountNumber: accountNumber, isJointAccount: isJointAccount).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /v1/Lending/bankaccount
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter bsb: (query)  
     - parameter accountNumber: (query)  
     - parameter isJointAccount: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putBankAccountWithRequestBuilder(bsb: String, accountNumber: String, isJointAccount: Bool? = nil) -> RequestBuilder<Void> {
        let path = "/v1/Lending/bankaccount"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "Bsb": bsb, 
            "AccountNumber": accountNumber, 
            "IsJointAccount": isJointAccount
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func resolveNameConflict(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        resolveNameConflictWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /v1/Lending/nameconflict/resolve
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer

     - returns: RequestBuilder<Void> 
     */
    open class func resolveNameConflictWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/v1/Lending/nameconflict/resolve"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
