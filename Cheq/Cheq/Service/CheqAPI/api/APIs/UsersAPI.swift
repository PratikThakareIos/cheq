//
// UsersAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class UsersAPI {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUser(completion: @escaping ((_ data: GetUserResponse?,_ error: Error?) -> Void)) {
        getUserWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/Users
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "moneySoftCredential" : {
    "msPassword" : "msPassword",
    "msUsername" : "msUsername"
  },
  "userDetail" : {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "numberOfDependents" : "numberOfDependents",
    "hasVerifiedKyc" : true,
    "residentialAddress" : "residentialAddress",
    "mobile" : "mobile",
    "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
    "state" : "state",
    "maritalStatus" : "maritalStatus"
  },
  "employer" : {
    "country" : "country",
    "address" : "address",
    "employmentType" : "employmentType",
    "latitude" : 0.8008281904610115,
    "employerName" : "employerName",
    "postCode" : "postCode",
    "state" : "state",
    "noFixedAddress" : true,
    "longitude" : 6.027456183070403
  }
}}]

     - returns: RequestBuilder<GetUserResponse> 
     */
    open class func getUserWithRequestBuilder() -> RequestBuilder<GetUserResponse> {
        let path = "/v1/Users"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GetUserResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserOnfidoKyc(completion: @escaping ((_ data: PutUserKycResponse?,_ error: Error?) -> Void)) {
        getUserOnfidoKycWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/Users/kyc
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "hasKycCompleted" : true,
  "hasKycFailed" : true,
  "sentOnfidoKycExpressChecked" : true,
  "applicantId" : "applicantId",
  "sdkToken" : "sdkToken"
}}]

     - returns: RequestBuilder<PutUserKycResponse> 
     */
    open class func getUserOnfidoKycWithRequestBuilder() -> RequestBuilder<PutUserKycResponse> {
        let path = "/v1/Users/kyc"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PutUserKycResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postPushNotificationToken(request: PostPushNotificationRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postPushNotificationTokenWithRequestBuilder(request: request).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /v1/Users/notification/token
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postPushNotificationTokenWithRequestBuilder(request: PostPushNotificationRequest? = nil) -> RequestBuilder<Void> {
        let path = "/v1/Users/notification/token"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putKycCheckPhoto(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putKycCheckPhotoWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /v1/Users/kyc/check
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer

     - returns: RequestBuilder<Void> 
     */
    open class func putKycCheckPhotoWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/v1/Users/kyc/check"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserDetail(request: PutUserDetailRequest? = nil, completion: @escaping ((_ data: GetUserResponse?,_ error: Error?) -> Void)) {
        putUserDetailWithRequestBuilder(request: request).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /v1/Users/detail
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "moneySoftCredential" : {
    "msPassword" : "msPassword",
    "msUsername" : "msUsername"
  },
  "userDetail" : {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "numberOfDependents" : "numberOfDependents",
    "hasVerifiedKyc" : true,
    "residentialAddress" : "residentialAddress",
    "mobile" : "mobile",
    "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
    "state" : "state",
    "maritalStatus" : "maritalStatus"
  },
  "employer" : {
    "country" : "country",
    "address" : "address",
    "employmentType" : "employmentType",
    "latitude" : 0.8008281904610115,
    "employerName" : "employerName",
    "postCode" : "postCode",
    "state" : "state",
    "noFixedAddress" : true,
    "longitude" : 6.027456183070403
  }
}}]
     
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<GetUserResponse> 
     */
    open class func putUserDetailWithRequestBuilder(request: PutUserDetailRequest? = nil) -> RequestBuilder<GetUserResponse> {
        let path = "/v1/Users/detail"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GetUserResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserEmployer(request: PutUserEmployerRequest? = nil, completion: @escaping ((_ data: GetUserResponse?,_ error: Error?) -> Void)) {
        putUserEmployerWithRequestBuilder(request: request).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /v1/Users/employer
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "moneySoftCredential" : {
    "msPassword" : "msPassword",
    "msUsername" : "msUsername"
  },
  "userDetail" : {
    "firstName" : "firstName",
    "lastName" : "lastName",
    "numberOfDependents" : "numberOfDependents",
    "hasVerifiedKyc" : true,
    "residentialAddress" : "residentialAddress",
    "mobile" : "mobile",
    "dateOfBirth" : "2000-01-23T04:56:07.000+00:00",
    "state" : "state",
    "maritalStatus" : "maritalStatus"
  },
  "employer" : {
    "country" : "country",
    "address" : "address",
    "employmentType" : "employmentType",
    "latitude" : 0.8008281904610115,
    "employerName" : "employerName",
    "postCode" : "postCode",
    "state" : "state",
    "noFixedAddress" : true,
    "longitude" : 6.027456183070403
  }
}}]
     
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<GetUserResponse> 
     */
    open class func putUserEmployerWithRequestBuilder(request: PutUserEmployerRequest? = nil) -> RequestBuilder<GetUserResponse> {
        let path = "/v1/Users/employer"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GetUserResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putUserOnfidoKyc(request: PutUserOnfidoKycRequest? = nil, completion: @escaping ((_ data: PutUserKycResponse?,_ error: Error?) -> Void)) {
        putUserOnfidoKycWithRequestBuilder(request: request).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - PUT /v1/Users/kyc
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "hasKycCompleted" : true,
  "hasKycFailed" : true,
  "sentOnfidoKycExpressChecked" : true,
  "applicantId" : "applicantId",
  "sdkToken" : "sdkToken"
}}]
     
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<PutUserKycResponse> 
     */
    open class func putUserOnfidoKycWithRequestBuilder(request: PutUserOnfidoKycRequest? = nil) -> RequestBuilder<PutUserKycResponse> {
        let path = "/v1/Users/kyc"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<PutUserKycResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
