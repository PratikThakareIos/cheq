//
// LendingAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class LendingAPI {
    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLending(completion: @escaping ((_ data: GetLendingOverviewResponse?,_ error: Error?) -> Void)) {
        getLendingWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/Lending/overview
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "wagerEarned" : 5.962133916683182,
  "lendingRequirement" : {
    "directDebitAgreement" : "directDebitAgreement",
    "bankAcccountBsb" : "bankAcccountBsb",
    "loanAgreement" : "loanAgreement",
    "hasVerifiedKyc" : true,
    "bankAcccountNumber" : "bankAcccountNumber",
    "hasConfirmedEmail" : true
  },
  "totalWithdrawal" : 1.4658129805029452,
  "lendingAmountAvailable" : 0.8008281904610115,
  "loanHistories" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "amount" : 5.637376656633329,
    "fee" : 2.3021358869347655,
    "description" : "description"
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "amount" : 5.637376656633329,
    "fee" : 2.3021358869347655,
    "description" : "description"
  } ],
  "lendingAmountLimit" : 6.027456183070403,
  "nextPayDate" : "nextPayDate"
}}]

     - returns: RequestBuilder<GetLendingOverviewResponse> 
     */
    open class func getLendingWithRequestBuilder() -> RequestBuilder<GetLendingOverviewResponse> {
        let path = "/v1/Lending/overview"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<GetLendingOverviewResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getLendingHistories(completion: @escaping ((_ data: [LoanTransaction]?,_ error: Error?) -> Void)) {
        getLendingHistoriesWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - GET /v1/Lending/histories
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example=[ {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 5.637376656633329,
  "fee" : 2.3021358869347655,
  "description" : "description"
}, {
  "date" : "2000-01-23T04:56:07.000+00:00",
  "amount" : 5.637376656633329,
  "fee" : 2.3021358869347655,
  "description" : "description"
} ]}]

     - returns: RequestBuilder<[LoanTransaction]> 
     */
    open class func getLendingHistoriesWithRequestBuilder() -> RequestBuilder<[LoanTransaction]> {
        let path = "/v1/Lending/histories"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<[LoanTransaction]>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter fileName: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getTimesheets(fileName: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getTimesheetsWithRequestBuilder(fileName: fileName).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /v1/Lending/timesheets/{fileName}
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter fileName: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func getTimesheetsWithRequestBuilder(fileName: String) -> RequestBuilder<Void> {
        var path = "/v1/Lending/timesheets/{fileName}"
        let fileNamePreEscape = "\(fileName)"
        let fileNamePostEscape = fileNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{fileName}", with: fileNamePostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter toFinancialAccountId: (query)  (optional)
     - parameter amount: (query)  (optional)
     - parameter fee: (query)  (optional)
     - parameter repaymentDate: (query)  (optional)
     - parameter agreedLoanTermsAndConditions: (query)  (optional)
     - parameter loanAgreement: (query)  (optional)
     - parameter agreedDirectDebitTermsAndConditions: (query)  (optional)
     - parameter directDebitAgreement: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postBorrow(toFinancialAccountId: Int? = nil, amount: Double? = nil, fee: Double? = nil, repaymentDate: Date? = nil, agreedLoanTermsAndConditions: Bool? = nil, loanAgreement: String? = nil, agreedDirectDebitTermsAndConditions: Bool? = nil, directDebitAgreement: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postBorrowWithRequestBuilder(toFinancialAccountId: toFinancialAccountId, amount: amount, fee: fee, repaymentDate: repaymentDate, agreedLoanTermsAndConditions: agreedLoanTermsAndConditions, loanAgreement: loanAgreement, agreedDirectDebitTermsAndConditions: agreedDirectDebitTermsAndConditions, directDebitAgreement: directDebitAgreement).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /v1/Lending/borrow
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter toFinancialAccountId: (query)  (optional)
     - parameter amount: (query)  (optional)
     - parameter fee: (query)  (optional)
     - parameter repaymentDate: (query)  (optional)
     - parameter agreedLoanTermsAndConditions: (query)  (optional)
     - parameter loanAgreement: (query)  (optional)
     - parameter agreedDirectDebitTermsAndConditions: (query)  (optional)
     - parameter directDebitAgreement: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postBorrowWithRequestBuilder(toFinancialAccountId: Int? = nil, amount: Double? = nil, fee: Double? = nil, repaymentDate: Date? = nil, agreedLoanTermsAndConditions: Bool? = nil, loanAgreement: String? = nil, agreedDirectDebitTermsAndConditions: Bool? = nil, directDebitAgreement: String? = nil) -> RequestBuilder<Void> {
        let path = "/v1/Lending/borrow"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "ToFinancialAccountId": toFinancialAccountId?.encodeToJSON(), 
            "Amount": amount, 
            "Fee": fee, 
            "RepaymentDate": repaymentDate?.encodeToJSON(), 
            "AgreedLoanTermsAndConditions": agreedLoanTermsAndConditions, 
            "LoanAgreement": loanAgreement, 
            "AgreedDirectDebitTermsAndConditions": agreedDirectDebitTermsAndConditions, 
            "DirectDebitAgreement": directDebitAgreement
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTime(request: PostWorksheetRequest? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postTimeWithRequestBuilder(request: request).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /v1/Lending/timesheets/geolocation
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postTimeWithRequestBuilder(request: PostWorksheetRequest? = nil) -> RequestBuilder<Void> {
        let path = "/v1/Lending/timesheets/geolocation"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter dateOfWork: (form)  (optional)
     - parameter uploadedFile: (form)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTimesheets(dateOfWork: Date? = nil, uploadedFile: URL? = nil, completion: @escaping ((_ data: UploadTimesheetResponse?,_ error: Error?) -> Void)) {
        postTimesheetsWithRequestBuilder(dateOfWork: dateOfWork, uploadedFile: uploadedFile).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }


    /**
     - POST /v1/Lending/timesheets/upload
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     - examples: [{contentType=application/json, example={
  "fileName" : "fileName"
}}]
     
     - parameter dateOfWork: (form)  (optional)
     - parameter uploadedFile: (form)  (optional)

     - returns: RequestBuilder<UploadTimesheetResponse> 
     */
    open class func postTimesheetsWithRequestBuilder(dateOfWork: Date? = nil, uploadedFile: URL? = nil) -> RequestBuilder<UploadTimesheetResponse> {
        let path = "/v1/Lending/timesheets/upload"
        let URLString = SwaggerClientAPI.basePath + path
        let formParams: [String:Any?] = [
            "DateOfWork": dateOfWork?.encodeToJSON(),
            "UploadedFile": uploadedFile
        ]

        let nonNullParameters = APIHelper.rejectNil(formParams)
        let parameters = APIHelper.convertBoolToString(nonNullParameters)
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<UploadTimesheetResponse>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter accountName: (query)  
     - parameter bsb: (query)  
     - parameter accountNumber: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postValidateAccount(accountName: String, bsb: String, accountNumber: String, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postValidateAccountWithRequestBuilder(accountName: accountName, bsb: bsb, accountNumber: accountNumber).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /v1/Lending/accounts/validate
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter accountName: (query)  
     - parameter bsb: (query)  
     - parameter accountNumber: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func postValidateAccountWithRequestBuilder(accountName: String, bsb: String, accountNumber: String) -> RequestBuilder<Void> {
        let path = "/v1/Lending/accounts/validate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "AccountName": accountName, 
            "Bsb": bsb, 
            "AccountNumber": accountNumber
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
