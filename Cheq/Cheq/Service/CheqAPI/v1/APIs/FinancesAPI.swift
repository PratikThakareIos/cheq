//
// FinancesAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class FinancesAPI {
    /**

     - parameter accountId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteAccount(accountId: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteAccountWithRequestBuilder(accountId: accountId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /v1/Finances/accounts/{accountId}
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter accountId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteAccountWithRequestBuilder(accountId: Int) -> RequestBuilder<Void> {
        var path = "/v1/Finances/accounts/{accountId}"
        let accountIdPreEscape = "\(accountId)"
        let accountIdPostEscape = accountIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{accountId}", with: accountIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter transactionId: (path)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func deleteTransaction(transactionId: Int, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        deleteTransactionWithRequestBuilder(transactionId: transactionId).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - DELETE /v1/Finances/transactions/{transactionId}
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter transactionId: (path)  

     - returns: RequestBuilder<Void> 
     */
    open class func deleteTransactionWithRequestBuilder(transactionId: Int) -> RequestBuilder<Void> {
        var path = "/v1/Finances/transactions/{transactionId}"
        let transactionIdPreEscape = "\(transactionId)"
        let transactionIdPostEscape = transactionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{transactionId}", with: transactionIdPostEscape, options: .literal, range: nil)
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getAccount(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getAccountWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /v1/Finances/accounts
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer

     - returns: RequestBuilder<Void> 
     */
    open class func getAccountWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/v1/Finances/accounts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getInstitutionLogos(completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        getInstitutionLogosWithRequestBuilder().execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /v1/Finances/institutions/logos
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer

     - returns: RequestBuilder<Void> 
     */
    open class func getInstitutionLogosWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/v1/Finances/institutions/logos"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter accounts: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postAccounts(accounts: [PostFinancialAccountRequest]? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postAccountsWithRequestBuilder(accounts: accounts).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /v1/Finances/accounts
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter accounts: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postAccountsWithRequestBuilder(accounts: [PostFinancialAccountRequest]? = nil) -> RequestBuilder<Void> {
        let path = "/v1/Finances/accounts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: accounts)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter institutions: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postFinancialInstitutions(institutions: [PostFinancialInstitutionRequest]? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postFinancialInstitutionsWithRequestBuilder(institutions: institutions).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /v1/Finances/institutions
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter institutions: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postFinancialInstitutionsWithRequestBuilder(institutions: [PostFinancialInstitutionRequest]? = nil) -> RequestBuilder<Void> {
        let path = "/v1/Finances/institutions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: institutions)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter transactions: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func postTransactions(transactions: [PostFinancialTransactionRequest]? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        postTransactionsWithRequestBuilder(transactions: transactions).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - POST /v1/Finances/transactions
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter transactions: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func postTransactionsWithRequestBuilder(transactions: [PostFinancialTransactionRequest]? = nil) -> RequestBuilder<Void> {
        let path = "/v1/Finances/transactions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: transactions)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter accounts: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func putAccount(accounts: [PutFinancialAccountRequest]? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        putAccountWithRequestBuilder(accounts: accounts).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - PUT /v1/Finances/accounts
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter accounts: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func putAccountWithRequestBuilder(accounts: [PutFinancialAccountRequest]? = nil) -> RequestBuilder<Void> {
        let path = "/v1/Finances/accounts"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: accounts)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter bsb: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func validateBsb(bsb: String? = nil, completion: @escaping ((_ data: Void?,_ error: Error?) -> Void)) {
        validateBsbWithRequestBuilder(bsb: bsb).execute { (response, error) -> Void in
            if error == nil {
                completion((), error)
            } else {
                completion(nil, error)
            }
        }
    }


    /**
     - GET /v1/Finances/accounts/bsb/validate
     - API Key:
       - type: apiKey Authorization 
       - name: Bearer
     
     - parameter bsb: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func validateBsbWithRequestBuilder(bsb: String? = nil) -> RequestBuilder<Void> {
        let path = "/v1/Finances/accounts/bsb/validate"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "bsb": bsb
        ])

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
